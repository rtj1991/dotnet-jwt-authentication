// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductAPI.Models;

#nullable disable

namespace ProductAPI.Migrations
{
    [DbContext(typeof(travellerContext))]
    [Migration("20220803051644_20220803TravelMigration")]
    partial class _20220803TravelMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductAPI.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ProductAPI.Models.Book_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book_Categories");
                });

            modelBuilder.Entity("ProductAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProductAPI.Models.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Followedby")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("follower")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Followedby");

                    b.HasIndex("follower");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("ProductAPI.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedUser")
                        .HasColumnType("integer");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUser");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("ProductAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Messages")
                        .HasColumnType("text");

                    b.Property<int?>("Receiver")
                        .HasColumnType("integer");

                    b.Property<int?>("Sender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Receiver");

                    b.HasIndex("Sender");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ProductAPI.Models.MyTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("MCreatedUsersUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MCreatedUsersUserId");

                    b.ToTable("MyTrips");
                });

            modelBuilder.Entity("ProductAPI.Models.Places", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("MyTripsId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TripId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MyTripsId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ProductAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedUser")
                        .HasColumnType("integer");

                    b.Property<int>("FCreatedUsersUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTripId")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FCreatedUsersUserId");

                    b.HasIndex("MyTripId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProductAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProductAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimestampCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProductAPI.Models.User_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("ProductAPI.Models.Book_Category", b =>
                {
                    b.HasOne("ProductAPI.Models.Book", "Book")
                        .WithMany("Book_Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductAPI.Models.Category", "Category")
                        .WithMany("Book_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductAPI.Models.Follower", b =>
                {
                    b.HasOne("ProductAPI.Models.User", "followed_by")
                        .WithMany("followed_by")
                        .HasForeignKey("Followedby");

                    b.HasOne("ProductAPI.Models.User", "followers")
                        .WithMany("Followers")
                        .HasForeignKey("follower")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("followed_by");

                    b.Navigation("followers");
                });

            modelBuilder.Entity("ProductAPI.Models.Gallery", b =>
                {
                    b.HasOne("ProductAPI.Models.User", "GCreateduser")
                        .WithMany("GCreateduser")
                        .HasForeignKey("CreatedUser");

                    b.Navigation("GCreateduser");
                });

            modelBuilder.Entity("ProductAPI.Models.Message", b =>
                {
                    b.HasOne("ProductAPI.Models.User", "Receivers")
                        .WithMany("Receivers")
                        .HasForeignKey("Receiver");

                    b.HasOne("ProductAPI.Models.User", "Senders")
                        .WithMany("Senders")
                        .HasForeignKey("Sender");

                    b.Navigation("Receivers");

                    b.Navigation("Senders");
                });

            modelBuilder.Entity("ProductAPI.Models.MyTrip", b =>
                {
                    b.HasOne("ProductAPI.Models.User", "MCreatedUsers")
                        .WithMany()
                        .HasForeignKey("MCreatedUsersUserId");

                    b.Navigation("MCreatedUsers");
                });

            modelBuilder.Entity("ProductAPI.Models.Places", b =>
                {
                    b.HasOne("ProductAPI.Models.MyTrip", "MyTrips")
                        .WithMany("Place")
                        .HasForeignKey("MyTripsId");

                    b.Navigation("MyTrips");
                });

            modelBuilder.Entity("ProductAPI.Models.Review", b =>
                {
                    b.HasOne("ProductAPI.Models.User", "FCreatedUsers")
                        .WithMany("FCreatedUsers")
                        .HasForeignKey("FCreatedUsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductAPI.Models.MyTrip", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MyTripId");

                    b.Navigation("FCreatedUsers");
                });

            modelBuilder.Entity("ProductAPI.Models.User_Role", b =>
                {
                    b.HasOne("ProductAPI.Models.Role", "Roles")
                        .WithMany("user_Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductAPI.Models.User", "Users")
                        .WithMany("user_Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProductAPI.Models.Book", b =>
                {
                    b.Navigation("Book_Categories");
                });

            modelBuilder.Entity("ProductAPI.Models.Category", b =>
                {
                    b.Navigation("Book_Categories");
                });

            modelBuilder.Entity("ProductAPI.Models.MyTrip", b =>
                {
                    b.Navigation("Place");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ProductAPI.Models.Role", b =>
                {
                    b.Navigation("user_Roles");
                });

            modelBuilder.Entity("ProductAPI.Models.User", b =>
                {
                    b.Navigation("FCreatedUsers");

                    b.Navigation("Followers");

                    b.Navigation("GCreateduser");

                    b.Navigation("Receivers");

                    b.Navigation("Senders");

                    b.Navigation("followed_by");

                    b.Navigation("user_Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
